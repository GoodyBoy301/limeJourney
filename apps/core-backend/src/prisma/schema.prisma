generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://tobi:tobi@localhost:5432/limeJourney"
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  password          String?
  name              String?
  googleId          String?   @unique
  isEmailVerified   Boolean   @default(false)
  lastLoginAt       DateTime?
  profilePictureUrl String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  refreshTokens     RefreshToken[]
  memberships       OrganizationMember[]
  invitationsSent   Invitation[] @relation("InvitationSent")
  role              UserRole  @default(MEMBER)
  currentOrganizationId String?
  currentOrganization Organization? @relation("CurrentOrganization", fields: [currentOrganizationId], references: [id])
}

model Segment {
  id             String   @id @default(uuid())
  name           String
  description    String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  conditions     Json
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([organizationId])
}

model Organization {
  id               String    @id @default(uuid())
  name             String
  members          OrganizationMember[]
  invitations      Invitation[]
  subscriptionId   String?   @unique
  subscriptionStatus SubscriptionStatus @default(INACTIVE)
  planId           String?
  subscriptionPeriodStart DateTime?
  subscriptionPeriodEnd   DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  currentUsers     User[]    @relation("CurrentOrganization")
  apiKeys          ApiKey[] 
  segments Segment[]
  messagingProfiles MessagingProfile[]
}

model ApiKey {
  id              String       @id @default(uuid())
  name            String
  key             String       @unique
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])
  createdAt       DateTime     @default(now())
  lastUsedAt      DateTime?
  expiresAt       DateTime?
  isActive        Boolean      @default(true)

  @@index([organizationId])
}

model OrganizationMember {
  id             String       @id @default(uuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  role           UserRole     @default(MEMBER)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, organizationId])
}

model Invitation {
  id              String    @id @default(uuid())
  email           String
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])
  invitedBy       String
  inviter         User      @relation("InvitationSent", fields: [invitedBy], references: [id])
  status          InvitationStatus @default(PENDING)
  expiresAt       DateTime
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model MessagingIntegration {
  id                    String    @id @default(uuid())
  name                  String
  type                  String    // e.g., "email", "sms", "push"
  providerName          String    // e.g., "AWS SES", "SendGrid", "Twilio", "Firebase FCM"
  requiredFields        Json      // Store the required fields as a JSON object
  confidentialFields    Json      // Store the confidential fields as a JSON object
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  profiles              MessagingProfile[]
}

model MessagingProfile {
  id                    String    @id @default(uuid())
  name                  String
  organizationId        String
  organization          Organization @relation(fields: [organizationId], references: [id])
  integrationId         String
  integration           MessagingIntegration @relation(fields: [integrationId], references: [id])
  credentials           Json      // Store the credentials as an encrypted JSON object
  status                String    // e.g., "active", "inactive", "configuring"
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@index([organizationId])
  @@index([integrationId])
  @@unique([id, organizationId])
}


enum UserRole {
  ADMIN
  MEMBER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PAST_DUE
  CANCELLED
}
