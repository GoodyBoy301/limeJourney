import "reflect-metadata";
import express, { Express, Request, Response, NextFunction } from "express";
import morgan from "morgan";
import helmet from "helmet";
import cors from "cors";
import { Server } from "http";
import { logger } from "@lime/telemetry/logger";
import { RegisterRoutes } from "./generated/routes"; // This will be generated by tsoa
import swaggerUi from "swagger-ui-express";
import passport from "passport";

export class App {
  private app: Express;
  private server: Server | null = null;

  constructor() {
    this.app = express();
    this.configureMiddleware();
    this.configureRoutes();
  }

  private configureMiddleware(): void {
    this.app.use(express.json());
    this.app.use(express.urlencoded({ extended: true }));
    this.app.use(morgan("dev"));
    this.app.use(helmet());
    this.app.use(cors());
    this.app.use(passport.initialize());

    // Use custom logger for each request
    this.app.use((req: Request, res: Response, next: NextFunction) => {
      logger.info("http", "Request received", {
        method: req.method,
        path: req.path,
      });
      next();
    });
  }

  private configureRoutes(): void {
    // Serve OpenAPI UI
    this.app.use(
      "/docs",
      swaggerUi.serve,
      swaggerUi.setup(undefined, {
        swaggerOptions: {
          url: "/swagger.json",
        },
      })
    );

    // Serve OpenAPI spec
    this.app.get("/swagger.json", (req: Request, res: Response) => {
      res.sendFile(__dirname + "/swagger.json");
    });

    // Register routes generated by tsoa
    RegisterRoutes(this.app);

    // Error handling middleware
    this.app.use(
      (err: Error, req: Request, res: Response, next: NextFunction) => {
        logger.error("http", "Unhandled error", err, {
          method: req.method,
          path: req.path,
        });
        res.status(500).send("Something broke!");
      }
    );
  }

  public start(port: number): void {
    this.server = this.app.listen(port, () => {
      logger.info("lifecycle", `Server is running on port ${port}`);
    });
  }

  public getApp(): Express {
    return this.app;
  }

  public async stop(): Promise<void> {
    if (this.server) {
      return new Promise((resolve, reject) => {
        this.server!.close((err) => {
          if (err) {
            logger.error("lifecycle", "Error shutting down server", err);
            reject(err);
          } else {
            logger.info("lifecycle", "Server shut down gracefully");
            resolve();
          }
        });
      });
    }
  }
}
